plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '7.+'
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    //implementation project(":java17")
    //testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'org.junit.jupiter:junit-jupiter:5.9.1'
    // https://mvnrepository.com/artifact/org.eclipse.swt/org.eclipse.swt.win32.win32.x86_64
    implementation 'org.eclipse.swt:org.eclipse.swt.win32.win32.x86_64:4.3'
    // https://jitpack.io/#java-system/qiita4j/2024.0909.0120
    //implementation 'com.github.java-system:qiita4j:2024.0909.0120'
    // https://jitpack.io/#org.bitbucket.javacommons/java17-lib
    implementation 'org.bitbucket.javacommons:java17-lib:2024.0911.0254'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

archivesBaseName = 'noname'

application {
    mainClass = 'app.Main'
}

shadowJar {
    zip64 true
}

tasks.register('run1', JavaExec) {
    main = 'app.MainStream1'
    group = 'application'
    classpath = sourceSets.main.runtimeClasspath
    args = ['arg1', 'arg2©']
}

tasks.register('run2', JavaExec) {
    main = 'app.MainStream2'
    group = 'application'
    classpath = sourceSets.main.runtimeClasspath
    args = ['arg1', 'arg2©']
}

tasks.register('run3', JavaExec) {
    main = 'app.MainStream3'
    group = 'application'
    classpath = sourceSets.main.runtimeClasspath
    args = ['arg1', 'arg2©']
}

tasks.register('runQiita', JavaExec) {
    main = 'qiita.Qiita01'
    group = 'application'
    classpath = sourceSets.main.runtimeClasspath
    args = ['arg1', 'arg2©']
}

tasks.register('runSample', JavaExec) {
    main = 'sample.SwingWorkerSample'
    group = 'application'
    classpath = sourceSets.main.runtimeClasspath
    args = ['arg1', 'arg2©']
}

tasks.register('copy_assets') {
    group = 'shadow'
    project.delete(files("${buildDir}/libs/assets") {
        //exclude '*.jar'
    })
    copy {
        from '.'
        into 'build/libs/'
        include 'assets/**'
    }
}
copy_assets.dependsOn shadowJar

tasks.register('runShadow1', JavaExec) {
    group = 'application'
    main = 'app.Main1'
    classpath = files(shadowJar.archiveFile)
    args = ['arg1', 'arg2']
}
//runShadow1.dependsOn shadowJar
runShadow1.dependsOn copy_assets

tasks.register('runShadow2', JavaExec) {
    group = 'application'
    main = 'app.Main2'
    classpath = files(shadowJar.archiveFile)
    args = ['arg1', 'arg2']
}
//runShadow2.dependsOn shadowJar
runShadow2.dependsOn copy_assets

test {
    useJUnitPlatform()
    testLogging {
        showStandardStreams true
        events 'started', 'skipped', 'passed', 'failed'
        exceptionFormat 'full'
    }
}
