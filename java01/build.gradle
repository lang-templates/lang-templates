plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '7.+'
    id 'org.openjfx.javafxplugin' version '0.1.0'
    // https://plugins.gradle.org/plugin/com.gluonhq.gluonfx-gradle-plugin
    // Gluon Client Plugin https://docs.gluonhq.com/client/0.1.31/
    // https://github.com/graalvm/graalvm-ce-builds/releases
    id "com.gluonhq.gluonfx-gradle-plugin" version "1.0.23"
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    //implementation project(":java17")
    //testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'org.junit.jupiter:junit-jupiter:5.9.1'
    // https://mvnrepository.com/artifact/commons-io/commons-io
    implementation 'commons-io:commons-io:2.16.1'
    // https://mvnrepository.com/artifact/org.eclipse.swt/org.eclipse.swt.win32.win32.x86_64
    //implementation 'org.eclipse.swt:org.eclipse.swt.win32.win32.x86_64:4.3'
    // https://jitpack.io/#org.bitbucket.javacommons/java17-lib
    implementation 'org.bitbucket.javacommons:java17-lib:2024.0913.0022.26'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
        //languageVersion = JavaLanguageVersion.of(19)
        //languageVersion = JavaLanguageVersion.of(22)
    }
}

// Gluon Client Plugin https://docs.gluonhq.com/client/0.1.31/
// OpenJFX時代のJDK選び - もしくはOpenJFX時代のアプリケーション配布 - JavaFX in the Box https://skrb.hatenablog.com/entry/2019/06/24/220639
// https://gluonhq.com/products/javafx/openjfx-17-release-notes/
// https://gluonhq.com/products/javafx/openjfx-22-release-notes/
javafx {
    version = '17.0.12'
    //version = '22.0.2'
    modules = [ 'javafx.controls' ]
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

archivesBaseName = 'noname'

application {
    mainClass = 'app.Main'
}

shadowJar {
    zip64 true
}

tasks.register('run1', JavaExec) {
    main = 'app.MainStream1'
    group = 'application'
    classpath = sourceSets.main.runtimeClasspath
    args = ['arg1', 'arg2©']
}

tasks.register('run2', JavaExec) {
    main = 'app.MainStream2'
    group = 'application'
    classpath = sourceSets.main.runtimeClasspath
    args = ['arg1', 'arg2©']
}

tasks.register('run3', JavaExec) {
    main = 'app.MainStream3'
    group = 'application'
    classpath = sourceSets.main.runtimeClasspath
    args = ['arg1', 'arg2©']
}

tasks.register('runQiita', JavaExec) {
    main = 'qiita.Qiita01'
    group = 'application'
    classpath = sourceSets.main.runtimeClasspath
    args = ['arg1', 'arg2©']
}

tasks.register('runSample', JavaExec) {
    main = 'sample.SwingWorkerSample'
    group = 'application'
    classpath = sourceSets.main.runtimeClasspath
    args = ['arg1', 'arg2©']
}

tasks.register('copy_assets') {
    group = 'shadow'
    project.delete(files("${buildDir}/libs/assets") {
        //exclude '*.jar'
    })
    copy {
        from '.'
        into 'build/libs/'
        include 'assets/**'
    }
}
copy_assets.dependsOn shadowJar

tasks.register('runShadow1', JavaExec) {
    group = 'application'
    main = 'app.Main1'
    classpath = files(shadowJar.archiveFile)
    args = ['arg1', 'arg2']
}
//runShadow1.dependsOn shadowJar
runShadow1.dependsOn copy_assets

tasks.register('runShadow2', JavaExec) {
    group = 'application'
    main = 'app.Main2'
    classpath = files(shadowJar.archiveFile)
    args = ['arg1', 'arg2']
}
//runShadow2.dependsOn shadowJar
runShadow2.dependsOn copy_assets

test {
    useJUnitPlatform()
    testLogging {
        showStandardStreams true
        events 'started', 'skipped', 'passed', 'failed'
        exceptionFormat 'full'
    }
}
